//
// File: myNNFunc_2000_R086.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 18-Feb-2018 13:49:43
//

// Include Files
#include "rt_nonfinite.h"
#include "myNNFunc_2000_R086.h"
#include "myNNFunc_2000_R086_emxutil.h"
#include "repmat.h"
#include "bsxfun.h"

// Function Declarations
static void mapminmax_apply(const emxArray_real32_T *x, emxArray_real32_T *y);

// Function Definitions

//
// Arguments    : const emxArray_real32_T *x
//                emxArray_real32_T *y
// Return Type  : void
//
static void mapminmax_apply(const emxArray_real32_T *x, emxArray_real32_T *y)
{
  emxArray_real32_T *value;
  emxArray_real32_T *c;
  int csz_idx_1;
  int i0;
  int asub;
  int ak;
  int ck;
  float av[116];
  static const float b[116] = { 0.0433779396F, 0.00372210611F, 0.000800961163F,
    146.864441F, 0.00253134081F, 0.0583482683F, 375.516327F, 0.00111085083F,
    1.86197269E-7F, 1.93585677E-7F, 2.50465547E-7F, 1.93585677E-7F,
    2.22093576E-7F, 4.49270273E-14F, 3.56199885E-14F, 4.43554258E-14F,
    1.00584695E-13F, 4.43554258E-14F, 0.250523061F, 0.00223088148F,
    0.000801282062F, 666666.625F, 836.470093F, 0.0856801122F, 0.798043787F,
    1.47401706E-5F, 2.28763781E-7F, 2.35104181E-7F, 2.49577852E-7F,
    1.51208482E-7F, 2.4957788E-7F, 3.4288141E-14F, 3.36675742E-14F,
    9.46463909E-14F, 6.91331893E-14F, 9.54800272E-14F, 2.94300426E-5F,
    0.00223088148F, 0.000801282062F, 666666.625F, 9389.6709F, 1.04924802E-5F,
    1212.12122F, 0.036512617F, 2.20237197E-11F, 2.25817871E-11F, 7.82082E-11F,
    3.57553362E-11F, 7.82082E-11F, 2.81652484E-17F, 2.91342508E-17F,
    8.65114E-18F, 3.50476E-17F, 8.65114E-18F, 0.113720007F, 0.108015552F,
    59.7710762F, 59.1558495F, 0.299984872F, 0.00371753844F, 0.000800961163F,
    116.522957F, 0.00403354643F, 0.164544076F, 2433.09F, 0.00422505662F,
    0.000738365285F, 0.000313791039F, 0.000723555218F, 0.0002800246F,
    0.000904224755F, 3.03640171E-8F, 2.26732766E-8F, 3.43337874E-8F,
    7.04136198E-8F, 3.43337874E-8F, 0.249654204F, 0.00223088148F,
    0.000801282062F, 3.55217052F, 0.00326113938F, 0.133458167F, 2.25834322F,
    1.67288363E-5F, 0.000743651588F, 0.000301436F, 0.000626395107F,
    0.000301427441F, 0.000920799735F, 3.2950247E-8F, 2.45078891E-8F,
    3.2995807E-8F, 7.58710428E-8F, 3.2995807E-8F, 0.710120082F, 0.00225950545F,
    0.000400480581F, 1285.34705F, 0.0193854496F, 0.575806141F, 3676.47046F,
    0.0117258038F, 0.14929463F, 0.283565342F, 0.307689041F, 0.283778906F,
    0.291660964F, 0.0101497769F, 0.000366798748F, 0.00028160747F,
    0.000729662715F, 0.000727358F, 0.135388985F, 0.136173517F, 0.110202082F,
    0.110182211F };

  emxInit_real32_T(&value, 2);
  emxInit_real32_T(&c, 2);

  //  ===== MODULE FUNCTIONS ========
  //  Map Minimum and Maximum Input Processing Function
  bsxfun(x, value);
  csz_idx_1 = value->size[1];
  i0 = c->size[0] * c->size[1];
  c->size[0] = 116;
  c->size[1] = csz_idx_1;
  emxEnsureCapacity((emxArray__common *)c, i0, (int)sizeof(float));
  if (c->size[1] != 0) {
    asub = 1;
    ak = 0;
    i0 = 116 * c->size[1] - 116;
    for (ck = 0; ck <= i0; ck += 116) {
      for (csz_idx_1 = 0; csz_idx_1 < 116; csz_idx_1++) {
        av[csz_idx_1] = value->data[ak + csz_idx_1];
      }

      for (csz_idx_1 = 0; csz_idx_1 < 116; csz_idx_1++) {
        av[csz_idx_1] *= b[csz_idx_1];
      }

      for (csz_idx_1 = 0; csz_idx_1 < 116; csz_idx_1++) {
        c->data[ck + csz_idx_1] = av[csz_idx_1];
      }

      if (asub < value->size[1]) {
        ak += 116;
        asub++;
      } else {
        asub = 1;
      }
    }
  }

  emxFree_real32_T(&value);
  csz_idx_1 = c->size[1];
  i0 = y->size[0] * y->size[1];
  y->size[0] = 116;
  y->size[1] = csz_idx_1;
  emxEnsureCapacity((emxArray__common *)y, i0, (int)sizeof(float));
  if (y->size[1] != 0) {
    asub = 1;
    ak = 0;
    i0 = 116 * y->size[1] - 116;
    for (ck = 0; ck <= i0; ck += 116) {
      for (csz_idx_1 = 0; csz_idx_1 < 116; csz_idx_1++) {
        av[csz_idx_1] = c->data[ak + csz_idx_1];
      }

      for (csz_idx_1 = 0; csz_idx_1 < 116; csz_idx_1++) {
        av[csz_idx_1] += -1.0F;
      }

      for (csz_idx_1 = 0; csz_idx_1 < 116; csz_idx_1++) {
        y->data[ck + csz_idx_1] = av[csz_idx_1];
      }

      if (asub < c->size[1]) {
        ak += 116;
        asub++;
      } else {
        asub = 1;
      }
    }
  }

  emxFree_real32_T(&c);
}

//
// MYNEURALNETWORKFUNCTION neural network simulation function.
//
//  Generated by Neural Network Toolbox function genFunction, 18-Feb-2018 13:32:45.
//
//  [y1] = myNeuralNetworkFunction(x1) takes these arguments:
//    x = 116xQ matrix, input #1
//  and returns:
//    y = 6xQ matrix, output #1
//  where Q is the number of samples.
// Arguments    : const emxArray_real32_T *x1
//                emxArray_real32_T *b_y1
// Return Type  : void
//
void myNNFunc_2000_R086(const emxArray_real32_T *x1, emxArray_real32_T *b_y1)
{
  emxArray_real32_T *xp1;
  emxArray_real32_T *a1;
  emxArray_real32_T *c;
  unsigned int unnamed_idx_1;
  int ib;
  int nx;
  int ar;
  int csz_idx_1;
  int br;
  int ic;
  int ia;
  static const float fv0[1160] = { -6.17047453F, 4.01465416F, 6.09016323F,
    -1.4051491F, 7.9402318F, 8.09290695F, -1.02815223F, -4.96797323F,
    2.82170558F, 3.39868283F, -16.7677441F, 2.04243398F, 6.94047403F,
    7.61958599F, -6.10522032F, 11.0417786F, 7.3890295F, 19.0549221F, 10.9824705F,
    1.26054311F, -0.158397421F, 1.30792451F, -0.82057935F, 0.560700774F,
    0.419399649F, -2.08509779F, 0.170842141F, 1.24057066F, 2.31404352F,
    -0.108753897F, -0.980310142F, -0.720846176F, -2.0976491F, 0.628848732F,
    -0.104474552F, 5.02277803F, 0.459179729F, 0.46131736F, -0.124126F,
    -2.00549626F, -1.34469712F, -1.25309479F, -3.09084511F, 0.0512441061F,
    0.516158938F, 2.05026984F, 0.0808772221F, 0.233990505F, 2.3733542F,
    -0.854646325F, -0.21220836F, -5.09648228F, -0.573649406F, -2.02984619F,
    1.44676161F, -0.490721762F, 1.00231457F, 1.42143691F, -3.19340968F,
    -0.195380315F, -2.11707902F, -1.29883015F, 2.39390635F, 3.321702F,
    -6.65234518F, -12.6020889F, -2.23832822F, -0.212171152F, -13.8266153F,
    -1.42592585F, 0.0451871827F, -0.0409252718F, 1.62897229F, 1.70104551F,
    -4.99996519F, -8.96935272F, -1.57297039F, -0.422326326F, -15.5586557F,
    -1.10175049F, 22.4855709F, 14.2166777F, 5.61373377F, 2.07474041F,
    2.55556655F, 20.7081699F, -0.725361F, -5.55140638F, 12.3073101F, 4.19634962F,
    -0.748078346F, 1.32032681F, 3.10592F, 1.34160864F, 2.62469769F, -3.48776436F,
    -0.204279929F, -2.09231758F, -3.55963373F, 0.531528413F, 16.0858288F,
    -2.11723685F, 16.149538F, -2.54906082F, -0.926128685F, 20.6728878F,
    -7.42237139F, 0.841609776F, 13.2014093F, -1.1556505F, 14.7753305F,
    -14.5827904F, 11.4845476F, -8.19427204F, -4.92240858F, 36.4550514F,
    -2.37266493F, 9.92830563F, 7.78124F, -3.38251F, 15.1346331F, 4.94863939F,
    3.10867429F, -0.0444541872F, 1.91622448F, 21.3917351F, 0.901230454F,
    1.53219163F, 3.90166163F, 1.11534154F, -4.42108631F, -4.33498096F,
    -7.53818035F, 6.18599796F, 3.14263487F, -4.25199699F, -2.56470466F,
    8.94264793F, -1.55130732F, -1.90142286F, 20.7423229F, -6.29157591F,
    -12.0756426F, -16.9584427F, -2.77846527F, 33.1271057F, 6.2504859F,
    10.7160206F, -0.615468562F, 7.37626314F, -4.17056513F, 0.546373963F,
    14.4857225F, -4.10197163F, -7.65981102F, 6.30240488F, -18.8084774F,
    1.41649711F, 20.0151F, 1.59207654F, 1.97662675F, 23.011961F, -11.5571728F,
    -12.9968739F, 3.37150979F, -4.27174568F, 1.53732383F, 6.00095749F,
    16.7913914F, 2.64166F, 30.6226749F, 11.0215425F, -8.59845448F, -3.65543103F,
    -1.46902454F, 42.1480865F, 15.5847225F, 4.97231579F, -2.87479115F,
    1.41204858F, 6.9848814F, -13.3291187F, -9.44416904F, -8.94097233F,
    9.49374676F, -5.13238668F, -4.39443207F, 5.13803434F, 8.04446793F,
    -2.88057351F, 6.42440033F, -2.05158091F, -0.00406378135F, 6.32009602F,
    28.9396687F, 1.39730036F, -13.493619F, -69.2628555F, 3.49204F, 52.0849571F,
    -1.60877943F, -0.0698565F, -0.149461076F, -0.00982737914F, -0.681156218F,
    -1.79890525F, -0.385076642F, 0.540716708F, -0.335883737F, -0.127158895F,
    -1.41242409F, -0.238036305F, -5.80348253F, -0.158719629F, -0.798790812F,
    7.15806389F, -0.199280903F, -0.160322294F, 2.84452033F, 0.114009872F,
    -7.03286028F, 3.54465985F, 35.8452911F, -1.26676154F, -0.989655495F,
    3.61780548F, -1.10400832F, -0.195838943F, -3.38867116F, 1.4080174F,
    -9.5661335F, 11.0543137F, 8.2246294F, -8.68586254F, 2.10595584F,
    -8.81058502F, -9.1186161F, 2.02477646F, 32.3341827F, 0.875319123F, 19.29245F,
    0.38311258F, -3.24611735F, 7.51871634F, -0.556465447F, -16.0255775F,
    2.80155277F, 0.626256347F, 14.3355608F, -1.26681244F, 17.6978321F,
    -0.365764737F, -3.75203109F, 9.13853073F, 0.252639234F, -7.47546911F,
    1.99236369F, 0.689963579F, -4.99775887F, -1.44683683F, -1.08222687F,
    9.11053658F, 0.997094154F, 8.30927944F, -0.732268751F, -11.538043F,
    -3.68817496F, 2.14502478F, 9.89359951F, -1.30712509F, -5.69525194F,
    -16.4169903F, -9.36683083F, -10.3360472F, 16.3496532F, -11.4599714F,
    -5.63294601F, 7.98307371F, 5.94471884F, -4.88106346F, -3.7639F, 1.34395659F,
    6.44687462F, -2.27236414F, 5.19808245F, 11.9268217F, 12.6370411F,
    -5.39303923F, -7.5357728F, 3.93694115F, 15.1320438F, 6.04934263F,
    22.4116154F, -13.7486591F, -10.4793282F, 9.43839645F, -2.20841479F,
    -2.85263205F, -0.512095213F, 2.90836453F, 6.80161858F, -1.7278837F,
    -1.3561281F, -9.4875946F, 6.60260725F, -4.10022163F, -5.88186216F,
    2.27571321F, 13.8101482F, -0.611240685F, 20.2175045F, 1.31470942F,
    4.10544252F, -6.95172262F, -4.6673708F, 16.7407665F, 6.59710789F,
    -6.83968449F, -14.8008642F, 4.50837851F, -5.43317509F, -4.827672F,
    13.004261F, 9.72693729F, -14.9202623F, 24.0528412F, 4.15749216F,
    -5.82953167F, -7.8943224F, 3.9183073F, -26.4839516F, -3.09729958F,
    6.91467476F, 6.86236191F, -4.42557526F, 11.3061867F, 14.8048697F,
    -7.52726746F, -25.9501171F, 3.4901793F, -2.31626487F, -1.70472467F,
    12.1881161F, 10.1318169F, -1.74318838F, 1.05280077F, 17.1705265F,
    -1.93547523F, -1.6930362F, -0.0866149068F, 11.2958832F, 0.543884933F,
    -1.91485941F, -3.90875697F, 5.28582048F, -2.87100148F, -7.70572F,
    3.90675712F, 12.3231926F, -3.72514701F, -1.21956432F, -0.813724339F,
    -3.57525373F, 1.91131556F, 0.967207909F, -5.85881138F, 2.87563705F,
    2.4114306F, 3.52290654F, -1.63607705F, -1.06054294F, -0.191292F,
    -0.428246647F, -0.287899554F, 0.764105082F, -10.4028578F, -0.0940072909F,
    -0.0439373478F, 0.599093556F, 0.148652226F, 1.47149289F, 0.229888871F,
    0.600533485F, 0.340658635F, -0.832096875F, 4.06071234F, 0.178169459F,
    0.000768880302F, 0.0310572069F, -0.169479012F, 1.6061691F, -1.19949698F,
    9.11996174F, 3.53730941F, -5.78980875F, 8.05619907F, 1.30490589F,
    2.61223912F, -12.8776331F, -6.20730543F, -0.183620423F, 3.11546087F,
    -5.33969116F, -5.53623629F, -0.919832706F, -7.99641371F, -1.46530223F,
    -3.20580626F, 12.8265009F, 12.4728556F, -0.112583168F, 1.02797699F,
    -3.16596532F, 1.0016464F, -0.306374758F, -9.23183441F, 0.552475333F,
    -0.670963109F, 6.590837F, 6.86958361F, -4.86091805F, -5.81312513F,
    1.76492274F, 6.18048143F, 8.04092312F, -5.42309F, -4.0409193F, -3.39046741F,
    -0.741164804F, -10.1693726F, -1.71491539F, 1.87289429F, -1.30059564F,
    23.5608273F, 20.4551144F, -17.2321358F, -10.3231602F, -1.88316417F,
    -2.37731F, -25.4742336F, -1.16837549F, -2.03744984F, -0.303440422F,
    -0.613853157F, 6.00619698F, 9.08026218F, -1.17093813F, 0.475418657F,
    -5.5289135F, -9.73555088F, 0.448864579F, -0.0536460951F, 3.08260059F,
    -1.67394292F, -0.0258908216F, 7.79823637F, -1.68051994F, -0.83688283F,
    -5.39008427F, -3.48779798F, -0.330208391F, 4.42779827F, -2.43110299F,
    3.72106361F, 1.30918252F, -12.4429073F, -6.88773632F, -9.57304287F,
    6.25542545F, 8.48585415F, 1.28192198F, -1.08288765F, 6.91076469F,
    -1.44810724F, -5.65541F, 10.3544159F, 2.69745016F, 3.9597187F, -9.54748726F,
    -3.804461F, -0.0077012782F, 4.44569635F, -2.36316943F, 3.68794727F,
    1.75531173F, -12.3176594F, -6.92506742F, -11.7613649F, 6.28239393F,
    7.34898281F, -4.6799922F, -4.5708251F, -16.1895828F, -1.68490684F,
    19.9485283F, -4.7609024F, -0.306482822F, 2.73722315F, 14.4457655F,
    -5.87260866F, 3.58291221F, 4.08390427F, -1.77068496F, -6.85731888F,
    -6.99553967F, -9.71937F, -0.342192143F, -2.88560128F, 15.2837849F,
    19.9717903F, -1.28518641F, -0.133237615F, -2.96979952F, 3.57311511F,
    1.82553601F, -7.53461838F, 0.524555504F, -0.840826333F, 2.7501502F,
    -0.00854845624F, 0.96682936F, -0.647867858F, 3.76033425F, -2.68628955F,
    -1.82284689F, 8.61297131F, 0.638261199F, 1.53842306F, -5.31125832F,
    -2.78810573F, -1.04172838F, -0.196860358F, -2.70819163F, 3.52505255F,
    1.55739951F, -7.54862928F, 0.703363776F, -0.318870962F, 2.74851155F,
    0.286811769F, 4.16779709F, 1.14340091F, 2.0739212F, 8.14714F, 4.02369118F,
    -38.0414F, -13.5856657F, 10.5992212F, 1.45155776F, -3.38855124F,
    -1.54260051F, 1.34678066F, -1.49175143F, -6.52881145F, -5.31982756F,
    41.4837837F, 12.9398232F, -11.4277277F, -0.923801959F, 5.23869181F,
    5.47896242F, 0.214279681F, -0.364410728F, 0.569286823F, 0.451538652F,
    -10.9629459F, -1.02084672F, -23.0958652F, 0.577210248F, -4.82771301F,
    -4.97458744F, -0.571225405F, -1.30398929F, -0.61168164F, -2.19894361F,
    -10.5443335F, 3.06565094F, 22.8856449F, 2.39618063F, 4.58156681F,
    -7.11165237F, 2.06951571F, -4.75222635F, 2.19620562F, 10.999855F,
    -3.48116279F, -7.38117409F, 2.52894783F, -7.7613306F, -2.07839F,
    -16.2417412F, 1.93373179F, 6.78581762F, 7.86940336F, -5.94482088F,
    11.1238794F, 7.15279198F, 17.7281647F, 11.2695F, 1.32745492F, -0.429030597F,
    1.41974056F, 0.536406517F, 0.18514061F, -0.514224F, -0.822905958F,
    -1.3019644F, -0.111251421F, -1.27334654F, 0.0204314347F, -22.2985439F,
    -8.71484661F, -24.1394157F, 6.82152557F, -15.0168972F, -4.99157F,
    22.5126667F, 21.8500061F, 14.1555424F, 0.00719345175F, -3.50496984F,
    -3.01128983F, 11.0543137F, -0.227702782F, -5.3448081F, 3.80327749F,
    6.48071527F, 0.243331581F, -6.52970743F, 0.603586912F, 9.57267952F,
    1.05836844F, 1.63739288F, -1.05168152F, -7.44686842F, 17.8930836F,
    12.0522423F, -1.82172024F, 25.1652985F, -1.59406173F, 6.09413385F,
    7.16562033F, -1.982692F, 0.997615457F, 1.08836937F, 15.4304113F, 1.62809873F,
    -0.163608298F, -9.11898518F, -3.10253906F, 10.2382402F, 4.18051767F,
    -8.59674835F, 0.834834278F, 5.69389391F, 6.54443026F, -2.63572764F,
    2.66582966F, -4.12512159F, -4.72959471F, -0.269839287F, 0.65069133F,
    -1.4891113F, -2.27544641F, -2.03425431F, 6.09140778F, -1.0581975F,
    3.15093327F, -6.19152F, -0.290724903F, 5.50943804F, 4.57732296F, 7.01308727F,
    7.14207363F, 7.39697456F, -14.5935173F, -6.31066751F, 17.7962418F,
    30.5163937F, -13.5438452F, -20.985014F, 7.5024929F, 5.95046F, 2.18918276F,
    -0.123986609F, -1.46342134F, -15.3229961F, 0.704025388F, 8.26597118F,
    19.7337418F, -6.99752903F, -2.73766232F, -7.96352291F, -16.8986454F,
    -7.12040949F, 31.9913769F, -11.88095F, 25.9168854F, -59.5408134F,
    8.17826748F, 15.0425663F, -7.40817F, -3.85671306F, -2.34058619F,
    -0.77323693F, -2.236444F, 9.81130123F, 3.69070315F, -17.4409199F,
    -16.038887F, 2.28943419F, -0.652131319F, -0.13819541F, 1.9496547F,
    2.23002577F, -5.04098654F, 2.25753F, -0.884016395F, 8.25256348F, 6.42653751F,
    -24.8149776F, -3.75769758F, -4.10992432F, 0.747420549F, -9.92473412F,
    28.3145599F, -14.6759949F, 11.1829252F, -24.712265F, 5.47713F, -8.83218479F,
    -0.899978399F, 9.01192951F, 4.66813946F, -7.88336754F, 0.342379063F,
    -13.9090576F, 5.04269028F, -1.32747889F, 2.63549805F, -2.84942603F,
    2.09749222F, 4.84069204F, 14.9467392F, 5.39437532F, -17.5128098F,
    3.12402654F, -13.746212F, 33.4734039F, 2.98254228F, -8.09909153F,
    3.54696488F, -3.00611067F, 0.232608184F, -1.24892819F, -1.07551384F,
    -8.54673386F, 22.4264908F, -6.71065712F, -7.13269806F, 2.68087196F,
    3.62039495F, 0.230589256F, -0.223175958F, 9.29826164F, 16.8934898F,
    -2.81521797F, -1.71051788F, 15.4963274F, 0.697821498F, -5.67804527F,
    2.30952835F, -0.00479098735F, -6.03253269F, -28.7791615F, -14.9079885F,
    13.6611786F, 69.1915131F, -3.69801879F, 66.9717331F, 0.657418191F,
    -0.22835353F, 0.30882585F, -0.394155592F, 0.582954705F, -0.385354191F,
    0.176075324F, -0.596729636F, 1.32843208F, -0.452039301F, 12.4426775F,
    5.42272568F, -5.58205366F, -17.0411854F, 29.8607025F, -44.3325119F,
    28.7320461F, -19.1886883F, 8.60865879F, 10.3390865F, -0.785284F,
    -8.08554173F, 5.98334312F, 11.3154144F, 7.26023865F, -35.1348152F,
    17.9406471F, -4.77806425F, 17.4375038F, -6.73136473F, 2.43312049F,
    -3.53604102F, -0.598527551F, 1.02827466F, -7.658957F, -13.0110559F,
    3.91552043F, 0.168352455F, -11.2153387F, -0.600725591F, -3.03939605F,
    -2.8237834F, -2.96130323F, 14.0940733F, 0.557587087F, 10.6850204F,
    -9.97371864F, 4.50538635F, -20.8226509F, -2.86315513F, -11.9443207F,
    2.31420302F, -0.426777929F, 11.8411169F, -5.3350296F, -8.3040905F,
    -10.9463329F, 4.26388454F, 36.211998F, -2.18282127F, -3.58932972F,
    1.08634961F, -0.803034902F, -2.53062248F, 1.57838273F, -0.258304805F,
    2.24984026F, 1.46090734F, 8.81711F, -1.35547292F, 15.8971691F, 5.27407026F,
    5.92310429F, 5.47442198F, 8.07888F, 5.46230364F, 8.17068F, -3.31266236F,
    2.64425898F, -2.98683619F, 3.95173311F, -0.885421157F, -0.09697254F,
    1.85719979F, 7.12922096F, -0.766239464F, 0.0468689539F, 2.89867091F,
    -1.4786433F, 0.437272131F, -0.402276814F, -6.35702848F, 7.34726572F,
    -6.27039385F, -6.93694305F, 14.6989985F, 0.897500336F, -2.63261414F,
    -32.4023857F, -0.92046386F, -4.21508312F, 0.188496441F, 0.427048147F,
    -1.84392691F, -4.29257488F, -0.768559337F, -0.04635996F, -0.296586096F,
    -1.77593315F, -0.497576F, 10.1081352F, 3.61482692F, 6.27767849F, 9.08688545F,
    -14.4335136F, 3.89343023F, -8.87145424F, -4.88496113F, -16.7462101F,
    3.14668107F, -10.6982899F, -0.976749837F, -6.51156664F, -0.893397748F,
    1.43078089F, 8.20189095F, -2.13437986F, 5.89048862F, -17.4895668F,
    -5.75882816F, -7.39193392F, -0.309429586F, -5.02903128F, 25.1629066F,
    11.0348463F, 7.53464651F, -2.37583828F, 8.20323849F, -0.622520149F,
    -3.01442146F, 0.268290877F, 10.3467188F, -4.34055042F, 13.7793131F,
    -6.89112425F, -7.45060301F, -9.83836746F, 0.30918014F, 5.12627077F,
    -1.46717286F, 6.06409788F, 6.07547188F, 4.19202852F, -20.9379025F,
    -2.80663347F, 1.74901617F, 7.50921392F, -4.39001417F, -17.407074F,
    -1.35233819F, -6.69297791F, 3.20016837F, -0.333390385F, -4.55120182F,
    -8.84373093F, -2.33568215F, -3.08463883F, 1.06306291F, -2.17320776F,
    5.94276142F, -4.47573471F, 1.54061115F, 4.63987207F, 11.2296467F, -19.7594F,
    15.8882065F, -8.53435898F, -21.077734F, 0.482337326F, -0.583980143F,
    -2.76851916F, -1.6910603F, 0.800980568F, 0.000601205102F, 1.68036115F,
    -2.31046295F, -1.75551939F, -0.960618496F, 4.06777382F, 0.571179032F,
    3.56155252F, -0.139125556F, 0.732224643F, -1.79477334F, 2.84389591F,
    0.566102922F, 0.422736108F, 1.02007508F, 2.81136489F, 0.548272252F,
    -2.91621161F, -1.54235244F, 2.07212448F, 1.45714927F, -1.99150074F,
    -3.29062867F, -2.22134948F, -1.5641396F, 2.20756698F, 0.681958199F,
    0.942137778F, 1.3544991F, -2.64477873F, 2.25452137F, 1.08923793F,
    2.47209573F, 0.411728561F, 3.96873045F, 1.28276789F, -3.75539327F,
    -4.82912254F, 0.938094854F, 2.01949191F, -3.34933424F, -3.75768518F,
    -12.3320494F, -6.96034193F, -0.937910676F, 6.45885181F, 1.98408461F,
    -6.83718729F, 4.78601646F, -1.39660728F, -0.285937399F, -3.9513526F,
    2.48565078F, 1.2843169F, 0.446498781F, -1.26291549F, 1.42650306F,
    0.657571793F, -3.82469916F, -7.34516048F, -9.36406517F, -9.31928349F,
    1.93530428F, 10.090827F, 17.7242031F, -0.89863044F, 16.7129822F, 3.2614429F,
    -9.84367085F, 10.6671371F, -4.22488165F, 9.73039722F, -13.947752F,
    -4.43873215F, -2.71855831F, -2.97733092F, -5.7012229F, 7.97239733F,
    0.222765937F, -1.55100358F, -0.93855691F, 4.4163208F, 13.7253475F,
    4.62317801F, 4.43224716F, -7.16180658F, -0.922647774F, 13.8954067F,
    3.7101438F, 12.0032578F, 9.61239052F, -9.1114912F, 22.8592186F, 4.63887691F,
    -16.6888561F, -39.2649384F, -5.2311945F, -30.3739872F, 3.36673379F,
    -11.6992569F, -0.943944335F, -7.5041132F, -10.3763103F, -6.17601633F,
    13.8434362F, 39.417469F, 1.59755814F, 4.8152442F, 1.46919751F, -9.50268841F,
    -3.24027467F, 11.6954517F, -10.3419685F, -11.8038301F, -41.3499298F,
    -7.73499775F, -18.9627705F, 0.763488472F, -0.101136111F, 12.8017836F,
    3.3674736F, -6.47486258F, -2.10442877F, -21.2044563F, -11.7981234F,
    -13.9225721F, 14.0257607F, -2.31586432F, -0.173323557F, 0.492313027F,
    0.66066128F, -0.886489809F, -2.76054049F, -1.21853209F, -1.15538824F,
    0.139576495F, 0.181860119F, 2.04356217F, 5.24015331F, 3.3599894F,
    5.94267368F, -8.69133377F, 0.361929119F, -39.5417213F, 3.88292384F,
    3.11601257F, 12.5152645F, -5.59445524F, 18.0749111F, -10.1363297F,
    -0.853094399F, 7.22325659F, 1.91715682F, -0.163403869F, -1.23028672F,
    -26.6450558F, 39.8352089F, 4.14998674F, -0.0922572613F, -2.4603734F,
    -2.5781002F, -1.94594824F, 5.44928455F, -0.261849433F, -10.3982248F,
    -3.27768683F, -0.25576514F, -6.86414433F, -1.44050062F, 3.00287557F,
    0.856681824F, -2.89799476F, -1.53159821F, 0.642255664F, 11.2677364F,
    -1.37168384F, -1.35940075F, 14.4079361F, -3.23163915F, -51.2003937F,
    -40.6280975F, -5.15566778F, 89.2137527F, -21.3472576F, 58.018425F,
    -56.0336952F, -21.2332535F, -5.44248343F, 3.50678182F, 49.1417961F,
    37.4027557F, 10.7412262F, -87.219574F, 24.1336632F, -58.5268745F,
    54.9321213F, 22.3812504F };

  emxArray_real32_T *a2;
  emxArray_real32_T *b_c;
  int exitg1;
  static const float a[6] = { -0.688865602F, -0.0119444383F, -0.417534769F,
    0.497545153F, -0.0421703793F, 0.707682F };

  static const float fv1[60] = { -0.121618219F, -0.0246040896F, 0.0143904081F,
    -0.237663865F, 0.171260506F, 0.112573311F, -0.196572527F, 0.0978532F,
    0.0474678129F, 0.237308547F, -0.241277829F, -0.0653116F, 0.00439933268F,
    0.0293583591F, 0.13656497F, 0.29711777F, 0.184060097F, 0.218497813F,
    0.142469496F, -0.0408865847F, 0.0850905403F, 0.0775368288F, 0.384342134F,
    -0.116186537F, -0.23616761F, 0.0904310346F, -0.439690143F, -0.032850232F,
    0.13484253F, -0.0779896379F, 0.027925238F, 0.0318704098F, -0.0795351937F,
    -0.00670029176F, -0.541142642F, -0.295387864F, 0.237776726F, -0.0203449968F,
    0.0850727335F, 0.398562372F, -0.155925721F, 0.170395479F, 0.469277799F,
    0.733475447F, 0.492889971F, 0.242634356F, 0.0607412346F, 0.0387701951F,
    0.0826265514F, -0.0542467497F, -0.112226434F, -0.161937624F, 0.276827276F,
    0.159346849F, 0.459277689F, -0.104981296F, 0.651299715F, 0.0654748529F,
    0.381288618F, -0.0329845734F };

  float av[6];
  static const float b[6] = { 0.02F, 0.0200031754F, 0.0200013202F, 0.0200455301F,
    0.0200071447F, 0.0200157836F };

  static const float b_b[6] = { 0.0F, 0.0158714559F, 0.00660179323F,
    0.227135435F, 0.0357073136F, 0.0788559F };

  emxInit_real32_T(&xp1, 2);
  emxInit_real32_T(&a1, 2);
  emxInit_real32_T(&c, 2);

  //  ===== NEURAL NETWORK CONSTANTS =====
  //  Input 1
  //  Layer 1
  //  Layer 2
  //  Output 1
  //  ===== SIMULATION ========
  //  Dimensions
  //  samples
  //  Input 1
  mapminmax_apply(x1, xp1);

  //  Layer 1
  repmat((float)x1->size[1], a1);
  unnamed_idx_1 = (unsigned int)xp1->size[1];
  ib = c->size[0] * c->size[1];
  c->size[0] = 10;
  c->size[1] = (int)unnamed_idx_1;
  c->size[0] = 10;
  emxEnsureCapacity((emxArray__common *)c, ib, (int)sizeof(float));
  nx = c->size[1];
  for (ib = 0; ib < nx; ib++) {
    for (ar = 0; ar < 10; ar++) {
      c->data[ar + c->size[0] * ib] = 0.0F;
    }
  }

  if (xp1->size[1] != 0) {
    nx = 10 * (xp1->size[1] - 1);
    for (csz_idx_1 = 0; csz_idx_1 <= nx; csz_idx_1 += 10) {
      for (ic = csz_idx_1 + 1; ic <= csz_idx_1 + 10; ic++) {
        c->data[ic - 1] = 0.0F;
      }
    }

    br = 0;
    for (csz_idx_1 = 0; csz_idx_1 <= nx; csz_idx_1 += 10) {
      ar = -1;
      for (ib = br; ib + 1 <= br + 116; ib++) {
        if (xp1->data[ib] != 0.0F) {
          ia = ar;
          for (ic = csz_idx_1; ic + 1 <= csz_idx_1 + 10; ic++) {
            ia++;
            c->data[ic] += xp1->data[ib] * fv0[ia];
          }
        }

        ar += 10;
      }

      br += 116;
    }
  }

  emxFree_real32_T(&xp1);

  //  Sigmoid Symmetric Transfer Function
  ib = a1->size[0] * a1->size[1];
  a1->size[0] = 10;
  emxEnsureCapacity((emxArray__common *)a1, ib, (int)sizeof(float));
  nx = a1->size[0];
  csz_idx_1 = a1->size[1];
  nx *= csz_idx_1;
  for (ib = 0; ib < nx; ib++) {
    a1->data[ib] = -2.0F * (a1->data[ib] + c->data[ib]);
  }

  emxFree_real32_T(&c);
  nx = 10 * a1->size[1];
  for (ar = 0; ar + 1 <= nx; ar++) {
    a1->data[ar] = std::exp(a1->data[ar]);
  }

  ib = a1->size[0] * a1->size[1];
  a1->size[0] = 10;
  emxEnsureCapacity((emxArray__common *)a1, ib, (int)sizeof(float));
  nx = a1->size[0];
  csz_idx_1 = a1->size[1];
  nx *= csz_idx_1;
  for (ib = 0; ib < nx; ib++) {
    a1->data[ib] = 2.0F / (1.0F + a1->data[ib]) - 1.0F;
  }

  emxInit_real32_T(&a2, 2);

  //  Layer 2
  nx = (int)(float)x1->size[1];
  ib = a2->size[0] * a2->size[1];
  a2->size[0] = 6;
  a2->size[1] = nx;
  emxEnsureCapacity((emxArray__common *)a2, ib, (int)sizeof(float));
  if (!(nx == 0)) {
    csz_idx_1 = 1;
    do {
      exitg1 = 0;
      nx = (int)(float)x1->size[1];
      if (csz_idx_1 <= nx) {
        nx = (csz_idx_1 - 1) * 6;
        for (ar = 0; ar < 6; ar++) {
          a2->data[nx + ar] = a[ar];
        }

        csz_idx_1++;
      } else {
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  }

  emxInit_real32_T(&b_c, 2);
  unnamed_idx_1 = (unsigned int)a1->size[1];
  ib = b_c->size[0] * b_c->size[1];
  b_c->size[0] = 6;
  b_c->size[1] = (int)unnamed_idx_1;
  b_c->size[0] = 6;
  emxEnsureCapacity((emxArray__common *)b_c, ib, (int)sizeof(float));
  nx = b_c->size[1];
  for (ib = 0; ib < nx; ib++) {
    for (ar = 0; ar < 6; ar++) {
      b_c->data[ar + b_c->size[0] * ib] = 0.0F;
    }
  }

  if (a1->size[1] != 0) {
    nx = 6 * (a1->size[1] - 1);
    for (csz_idx_1 = 0; csz_idx_1 <= nx; csz_idx_1 += 6) {
      for (ic = csz_idx_1 + 1; ic <= csz_idx_1 + 6; ic++) {
        b_c->data[ic - 1] = 0.0F;
      }
    }

    br = 0;
    for (csz_idx_1 = 0; csz_idx_1 <= nx; csz_idx_1 += 6) {
      ar = -1;
      for (ib = br; ib + 1 <= br + 10; ib++) {
        if (a1->data[ib] != 0.0F) {
          ia = ar;
          for (ic = csz_idx_1; ic + 1 <= csz_idx_1 + 6; ic++) {
            ia++;
            b_c->data[ic] += a1->data[ib] * fv1[ia];
          }
        }

        ar += 6;
      }

      br += 10;
    }
  }

  emxFree_real32_T(&a1);
  ib = a2->size[0] * a2->size[1];
  a2->size[0] = 6;
  emxEnsureCapacity((emxArray__common *)a2, ib, (int)sizeof(float));
  csz_idx_1 = a2->size[0];
  nx = a2->size[1];
  nx *= csz_idx_1;
  for (ib = 0; ib < nx; ib++) {
    a2->data[ib] += b_c->data[ib];
  }

  //  Output 1
  //  Map Minimum and Maximum Output Reverse-Processing Function
  csz_idx_1 = a2->size[1];
  ib = b_c->size[0] * b_c->size[1];
  b_c->size[0] = 6;
  b_c->size[1] = csz_idx_1;
  emxEnsureCapacity((emxArray__common *)b_c, ib, (int)sizeof(float));
  if (b_c->size[1] != 0) {
    nx = 1;
    csz_idx_1 = 0;
    ib = 6 * b_c->size[1] - 6;
    for (br = 0; br <= ib; br += 6) {
      for (ar = 0; ar < 6; ar++) {
        av[ar] = a2->data[csz_idx_1 + ar];
      }

      for (ar = 0; ar < 6; ar++) {
        av[ar] -= -1.0F;
      }

      for (ar = 0; ar < 6; ar++) {
        b_c->data[br + ar] = av[ar];
      }

      if (nx < a2->size[1]) {
        csz_idx_1 += 6;
        nx++;
      } else {
        nx = 1;
      }
    }
  }

  csz_idx_1 = b_c->size[1];
  ib = a2->size[0] * a2->size[1];
  a2->size[0] = 6;
  a2->size[1] = csz_idx_1;
  emxEnsureCapacity((emxArray__common *)a2, ib, (int)sizeof(float));
  if (a2->size[1] != 0) {
    nx = 1;
    csz_idx_1 = 0;
    ib = 6 * a2->size[1] - 6;
    for (br = 0; br <= ib; br += 6) {
      for (ar = 0; ar < 6; ar++) {
        av[ar] = b_c->data[csz_idx_1 + ar];
      }

      for (ar = 0; ar < 6; ar++) {
        av[ar] /= b[ar];
      }

      for (ar = 0; ar < 6; ar++) {
        a2->data[br + ar] = av[ar];
      }

      if (nx < b_c->size[1]) {
        csz_idx_1 += 6;
        nx++;
      } else {
        nx = 1;
      }
    }
  }

  emxFree_real32_T(&b_c);
  csz_idx_1 = a2->size[1];
  ib = b_y1->size[0] * b_y1->size[1];
  b_y1->size[0] = 6;
  b_y1->size[1] = csz_idx_1;
  emxEnsureCapacity((emxArray__common *)b_y1, ib, (int)sizeof(float));
  if (b_y1->size[1] != 0) {
    nx = 1;
    csz_idx_1 = 0;
    ib = 6 * b_y1->size[1] - 6;
    for (br = 0; br <= ib; br += 6) {
      for (ar = 0; ar < 6; ar++) {
        av[ar] = a2->data[csz_idx_1 + ar];
      }

      for (ar = 0; ar < 6; ar++) {
        av[ar] += b_b[ar];
      }

      for (ar = 0; ar < 6; ar++) {
        b_y1->data[br + ar] = av[ar];
      }

      if (nx < a2->size[1]) {
        csz_idx_1 += 6;
        nx++;
      } else {
        nx = 1;
      }
    }
  }

  emxFree_real32_T(&a2);
}

//
// File trailer for myNNFunc_2000_R086.cpp
//
// [EOF]
//
